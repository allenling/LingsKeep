Django filter Datetime with Mysql
=================================
Django支持通过指定的月，日，周几来搜索datetime, 如

yourobj.objects.filter(datetime_file__month=your_month)

这个是1.6之后加入的，是向后不兼容的[1]。

这个功能在sqlite3里面是正常的，但是在mysql中是搜索不到的，有人向django提问了[2]。

在ticket中最后给评论给出说明，即这个功能在不同的数据库下不一样[3], mysql下需要向mysql导入timezone信息的。

所以原因就是当你在django里面开启USE_TZ=True的时候，数据库中的datetime field会先转成目前时区的时间
(`When USE_TZ is True, datetime fields are converted to the current time zone before filtering. This requires time zone definitions in the database.`[4])
并且，SQL语句中会出现EXTRACT(MONTH FROM CONVERT_TZ(`LocalData_garmentchangelog`.`create_time`, 'UTC', 'Asia/Shanghai'))总是null，所以filter回来的结果就是空了。

解决方式就是向mysql导入时区信息，命令为[5]:
mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql

最后，0000-00-00 00:00:00的时间在mysql中会为None，在loaddata的时候需要注意。

全面的解释在[6]:


[1] https://docs.djangoproject.com/en/dev/releases/1.6/#time-zone-aware-day-month-and-week-day-lookups

[2] https://code.djangoproject.com/ticket/22528

[3] https://docs.djangoproject.com/en/1.7/ref/models/querysets/#datetimes

[4] https://docs.djangoproject.com/en/1.7/ref/models/querysets/#month

[5] http://dev.mysql.com/doc/refman/5.6/en/mysql-tzinfo-to-sql.html

[6] http://www.zhiwehu.com/blog/django-filter-on-datetime__month-with-mysql-should/

Rabbitmq: Direct reply-to
==========================

在celery中，如果使用了flower，总是会出现一个名为xxx.reply.celery.pidbox的queue。

我们知道celery中的monitor是基于event，远程命令也一样。当flower发送远程命令给worker之后，worker的回复就通过那个queue传递给flower，但是那个queue在rabbitmq的监控页面却看不到任何的income和outcome，

并且，肯定是flower消费该queue的message，但是同样的，在rabbitmq的监控页面也没显示consumer。

猜想reply-to这个功能应该是amqp或者rabbitmq自己实现的。

关于reply-to行为和特点
----------------------
http://www.rabbitmq.com/direct-reply-to.html

The direct reply-to feature allows RPC clients to receive replies directly from their RPC server, without going through a reply queue. ("Directly" here still means going through AMQP and the RabbitMQ server; there is no separate network connection between RPC client and RPC server.)

Usage:

* Consume from the **pseudo-queue** amq.rabbitmq.reply-to in no-ack mode. There is no need to declare this "queue" first, although the client can do so if it wants.

* Set the reply-to property in their request message to amq.rabbitmq.reply-to

The RPC server will then see a reply-to property with a generated name. It should publish to the default exchange ("") with the routing key set to this value (i.e. just as if it were sending to a reply queue as usual). **The message will then be sent straight to the client consumer.**

Rabbitmq的Direct Replyto是用于RPC（Remote procedure call）
-----------------------------------------------------------

http://videlalvaro.github.io/2010/10/rpc-over-rabbitmq.html
