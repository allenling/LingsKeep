在公司写了三个月的golang，写的时候遇到一些在golang中一些"代码范式", 然后我个人喜欢Python，所以在业余写Python的时候，习惯上就有一种不自觉就往golang方向，然后有时候会跟之前写东西的习惯有点小冲突, 对我来说，往往是A or B的的小疑惑.



1. error or exception
----------------------

golang中只有error，所以很重要一点就是需要处理error，而Python中是异常Exception.

什么时候error，什么时候Exception?

个人理解是只要是不符合预期的都是异常, 比如django中的orm中的objects.get, 这个方法是预期是一定能返回一个存在的记录，但是没有，就是异常，而比如django中的比较两个hash的函数，
当两个hash值不一致的是，这个是可预期的结果，比较嘛，要么一致要么不一致，都正常，所以不一致的时候函数没有引发异常，而已返回False而已.

又比如写入一个文件，当写入的时候，必须是文件没有关闭的，这个时候如果文件已经关闭了，那就是异常了.

epoll中读写都是默认你知道有足够可用的缓存区，然后如果可用缓存区空间不足，那就是异常了(python实现中是异常, 其他应该对应错误)
:qa


2. class or function
----------------------

golang中类的概念很淡，struct只是数据的聚合，而所谓的方法只是绑定上去的一些函数而已，struct连构造函数都没有.

而Python中，类还是比较重要的.

而什么时候用类，什么时候用function，个人理解是可以用一些数据来标识一类对象，这一类对象有自己的行为，当遇到这样的情况的时候，就可以用类了.


比如，可以用地址和端口号来标识一个连接，这样我们就可以写成一个连接类，实例化之后，连接对象可以自己关闭，可以直接取connect等等, 不太可能说打开一个连接是一个函数，然后函数接受地址和端口，然后关闭连接也是一个
函数，然后传入的也是地址和端口，或者一些连接的属性，比如是否是半连接状态等等，这样看起来就很乱，用类就好多了，因为类可以在执行一个行为之后，保存自己的状态，关闭的时候判断自己的状态来决定如何关闭.

又比如, 可以用文件路径来标识一个文件，这样就是一个文件类，open可以是一个函数，传入文件路径得到一个文件类的实例，然后文件类里面有read, close，write等一组自己的行为. 如果write是一个函数，传入
文件路径，这样我们在函数的是还要判断这个文件是否关闭等等一些条件，又不能把这些条件都传入，很麻烦，用类的话，没有close的时候，本身保存一个_closed的标识，write的时候就判断自己的关闭标识是否是False就可以了.

所以类还可以保存一些中间的属性和状态，不用每次都传入，或者每次都取判断一次，因为这些状态是根据每一个行为而改变的，用类就方便很多.




